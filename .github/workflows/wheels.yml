name: Wheels

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - main
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2022, macos-13] # , macos-14
        arch: [native]
        include:
          - os: ubuntu-latest
            arch: aarch64
          - os: ubuntu-latest
            arch: ppc64le
          - os: ubuntu-latest
            arch: s390x
          - os: windows-2022
            boost_install_dir: D:\

    steps:
    - uses: actions/checkout@v5
      with:
        submodules: true

    - name: Set up QEMU
      if: runner.os == 'Linux' && matrix.arch != 'native'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    # - name: MacOS permissions fix
    #   if: matrix.os == 'macos-14'
    #   run: sudo chown runner:admin -R /usr/local

    - name: Install boost
      uses: MarkusJx/install-boost@v2.5.0
      if: ${{ runner.os == 'Windows' }} # || runner.os == 'macOS'
      id: install-boost
      with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          boost_version: 1.83.0
          toolset: msvc
          boost_install_dir: ${{ matrix.boost_install_dir }}
          link: static
          platform_version: 2022

    - uses: pypa/cibuildwheel@v3.1.4
      env:
        CIBW_ARCHS_MACOS: ${{ matrix.arch }}
        CIBW_ARCHS_LINUX: ${{ matrix.arch }}
        CIBW_ENVIRONMENT_WINDWOS: BOOST_ROOT='${{ matrix.boost_install_dir }}boost\boost'
        # CIBW_ENVIRONMENT_WINDOWS: BOOST_ROOT='${{ steps.install-boost.outputs.BOOST_ROOT }}'
        CIBW_ENVIRONMENT_MACOS: BOOST_ROOT={package}/boost MACOSX_DEPLOYMENT_TARGET="10.15"
        CIBW_BEFORE_BUILD_LINUX: echo $BOOST_ROOT
        CIBW_BEFORE_ALL_MACOS: >
          brew install wget &&
          cd {package} &&  mkdir -p boost/installed && cd boost &&
          wget --no-check-certificate 'https://archives.boost.io/release/1.74.0/source/boost_1_74_0.tar.bz2' &&
          tar xf boost_1_74_0.tar.bz2 &&
          cd boost_1_74_0 && ./bootstrap.sh --without-libraries=python,mpi,graph,graph_parallel && ./b2 install --without-python --without-mpi --without-graph --without-graph_parallel &&
          cd {package}
        CIBW_TEST_COMMAND: python -m pytest --rootdir={package} {package}/tests
        CIBW_TEST_REQUIRES: pytest
        CIBW_ENVIRONMENT_LINUX: BOOST_ROOT=/boost
        CIBW_ENVIRONMENT_PASS_LINUX: BOOST_ROOT

        # --prefix={package}/boost/installed

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels (Linux)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ matrix.arch }}
        path: wheelhouse/*.whl

    - name: Upload wheels (Other)
      if: runner.os != 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}
        path: wheelhouse/*.whl

  upload_all:
    name: Upload if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - uses: actions/download-artifact@v5
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.pypi_password }}
